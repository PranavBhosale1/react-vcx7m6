{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-vcx7m6\\\\src\\\\components\\\\RoadmapView.js\",\n  _s = $RefreshSig$();\n/* global mermaid */ // Tell ESLint about the mermaid global variable\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { roadmapData as initialRoadmapData } from '../data/roadmapData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoadmapView() {\n  _s();\n  const mermaidContainer = useRef(null);\n  const [roadmapData, setRoadmapData] = useState(initialRoadmapData);\n  const [completionPercentage, setCompletionPercentage] = useState(0);\n  useEffect(() => {\n    if (mermaidContainer.current) {\n      renderMermaidDiagram();\n      calculateCompletionPercentage();\n    }\n  }, []);\n  const renderMermaidDiagram = () => {\n    let mermaidMarkdown = 'graph LR\\n';\n    roadmapData.subjects.forEach(subject => {\n      mermaidMarkdown += `${subject.id}([${subject.name}])\\n`;\n      subject.topics.forEach(topic => {\n        mermaidMarkdown += `${subject.id} --> ${topic.id}[${topic.name} ${topic.completed ? '(Completed)' : ''}]\\n`;\n      });\n    });\n    mermaid.render('mermaid-diagram', mermaidMarkdown, svgCode => {\n      if (mermaidContainer.current) {\n        mermaidContainer.current.innerHTML = svgCode;\n        attachClickHandlers(); // Attach click event listeners after rendering\n      }\n    });\n  };\n  const attachClickHandlers = () => {\n    roadmapData.subjects.forEach(subject => {\n      subject.topics.forEach(topic => {\n        const topicNode = document.querySelector(`#${topic.id}`);\n        if (topicNode) {\n          topicNode.addEventListener('click', () => handleTopicClick(topic.id));\n        }\n      });\n    });\n  };\n  const handleTopicClick = topicId => {\n    const updatedRoadmapData = {\n      ...roadmapData\n    };\n    updatedRoadmapData.subjects.forEach(subject => {\n      const topicToUpdate = subject.topics.find(t => t.id === topicId);\n      if (topicToUpdate) {\n        topicToUpdate.completed = !topicToUpdate.completed;\n      }\n    });\n    setRoadmapData(updatedRoadmapData);\n    calculateCompletionPercentage();\n  };\n  const calculateCompletionPercentage = () => {\n    const completedTopics = roadmapData.subjects.reduce((total, subject) => {\n      return total + subject.topics.filter(topic => topic.completed).length;\n    }, 0);\n    const totalTopics = roadmapData.subjects.reduce((total, subject) => {\n      return total + subject.topics.length;\n    }, 0);\n    setCompletionPercentage(completedTopics / totalTopics * 100);\n  };\n  useEffect(() => {\n    renderMermaidDiagram();\n  }, [roadmapData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mermaidContainer,\n      className: \"mermaid\",\n      id: \"mermaid-diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Roadmap Completion: \", completionPercentage.toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapView, \"ULJ44Lo0DEyryvPz6DxLGspAqug=\");\n_c = RoadmapView;\nexport default RoadmapView;\nvar _c;\n$RefreshReg$(_c, \"RoadmapView\");","map":{"version":3,"names":["React","useRef","useEffect","useState","roadmapData","initialRoadmapData","jsxDEV","_jsxDEV","RoadmapView","_s","mermaidContainer","setRoadmapData","completionPercentage","setCompletionPercentage","current","renderMermaidDiagram","calculateCompletionPercentage","mermaidMarkdown","subjects","forEach","subject","id","name","topics","topic","completed","mermaid","render","svgCode","innerHTML","attachClickHandlers","topicNode","document","querySelector","addEventListener","handleTopicClick","topicId","updatedRoadmapData","topicToUpdate","find","t","completedTopics","reduce","total","filter","length","totalTopics","children","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["D:/react-vcx7m6/src/components/RoadmapView.js"],"sourcesContent":["/* global mermaid */ // Tell ESLint about the mermaid global variable\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { roadmapData as initialRoadmapData } from '../data/roadmapData'; \r\n\r\nfunction RoadmapView() {\r\n  const mermaidContainer = useRef(null);\r\n  const [roadmapData, setRoadmapData] = useState(initialRoadmapData);\r\n  const [completionPercentage, setCompletionPercentage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (mermaidContainer.current) {\r\n      renderMermaidDiagram();\r\n      calculateCompletionPercentage();\r\n    }\r\n  }, []);\r\n\r\n  const renderMermaidDiagram = () => {\r\n    let mermaidMarkdown = 'graph LR\\n';\r\n\r\n    roadmapData.subjects.forEach((subject) => {\r\n      mermaidMarkdown += `${subject.id}([${subject.name}])\\n`;\r\n\r\n      subject.topics.forEach((topic) => {\r\n        mermaidMarkdown += `${subject.id} --> ${topic.id}[${topic.name} ${topic.completed ? '(Completed)' : ''}]\\n`;  \r\n      });\r\n    });\r\n\r\n    mermaid.render('mermaid-diagram', mermaidMarkdown, (svgCode) => {\r\n      if (mermaidContainer.current) {\r\n        mermaidContainer.current.innerHTML = svgCode;\r\n        attachClickHandlers(); // Attach click event listeners after rendering\r\n      }\r\n    });\r\n  };\r\n\r\n  const attachClickHandlers = () => {\r\n    roadmapData.subjects.forEach((subject) => {\r\n      subject.topics.forEach((topic) => {\r\n        const topicNode = document.querySelector(`#${topic.id}`);\r\n        if (topicNode) {\r\n          topicNode.addEventListener('click', () => handleTopicClick(topic.id));\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleTopicClick = (topicId) => {\r\n    const updatedRoadmapData = { ...roadmapData };\r\n    updatedRoadmapData.subjects.forEach((subject) => {\r\n      const topicToUpdate = subject.topics.find((t) => t.id === topicId);\r\n      if (topicToUpdate) {\r\n        topicToUpdate.completed = !topicToUpdate.completed;\r\n      }\r\n    });\r\n\r\n    setRoadmapData(updatedRoadmapData);\r\n    calculateCompletionPercentage();\r\n  };\r\n\r\n  const calculateCompletionPercentage = () => {\r\n    const completedTopics = roadmapData.subjects.reduce((total, subject) => {\r\n      return total + subject.topics.filter(topic => topic.completed).length;\r\n    }, 0);\r\n    const totalTopics = roadmapData.subjects.reduce((total, subject) => {\r\n      return total + subject.topics.length;\r\n    }, 0);\r\n\r\n    setCompletionPercentage((completedTopics / totalTopics) * 100);\r\n  };\r\n\r\n  useEffect(() => {\r\n    renderMermaidDiagram();\r\n  }, [roadmapData]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mermaidContainer} className=\"mermaid\" id=\"mermaid-diagram\" />\r\n      <p>Roadmap Completion: {completionPercentage.toFixed(2)}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoadmapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}