{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-vcx7m6\\\\src\\\\components\\\\RoadmapView.js\",\n  _s = $RefreshSig$();\n/* global mermaid */ // Tell ESLint about the mermaid global variable\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { roadmapData as initialRoadmapData } from '../data/roadmapData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoadmapView() {\n  _s();\n  const mermaidContainer = useRef(null); // Container reference for Mermaid diagram\n  const [roadmapData, setRoadmapData] = useState(initialRoadmapData); // State for roadmap data\n  const [completionPercentage, setCompletionPercentage] = useState(0); // State for completion percentage\n\n  // Function to calculate completion percentage\n  const calculateCompletionPercentage = () => {\n    const completedTopics = roadmapData.subjects.reduce((total, subject) => {\n      return total + subject.topics.filter(topic => topic.completed).length;\n    }, 0);\n    const totalTopics = roadmapData.subjects.reduce((total, subject) => {\n      return total + subject.topics.length;\n    }, 0);\n    setCompletionPercentage(completedTopics / totalTopics * 100);\n  };\n\n  // Render Mermaid Diagram\n  const renderMermaidDiagram = () => {\n    let mermaidMarkdown = 'graph LR\\n'; // Mermaid diagram definition\n\n    // Loop through subjects and topics to create graph nodes and edges\n    roadmapData.subjects.forEach(subject => {\n      mermaidMarkdown += `${subject.id}([${subject.name}])\\n`;\n      subject.topics.forEach(topic => {\n        mermaidMarkdown += `${subject.id} --> ${topic.id}[\"${topic.name} ${topic.completed ? '(Completed)' : ''}\"]\\n`;\n      });\n    });\n\n    // Use mermaid.render to inject the generated diagram into the container\n    mermaid.render('mermaid-diagram', mermaidMarkdown, svgCode => {\n      if (mermaidContainer.current) {\n        mermaidContainer.current.innerHTML = svgCode; // Render Mermaid diagram into container\n        attachClickHandlers(); // Attach click handlers after rendering\n      }\n    });\n  };\n\n  // Attach click handlers to each topic node\n  const attachClickHandlers = () => {\n    roadmapData.subjects.forEach(subject => {\n      subject.topics.forEach(topic => {\n        const topicNode = document.getElementById(topic.id); // Get node by ID\n        if (topicNode) {\n          topicNode.addEventListener('click', () => handleTopicClick(topic.id)); // Attach click event\n        }\n      });\n    });\n  };\n\n  // Handle topic click to toggle completion status\n  const handleTopicClick = topicId => {\n    const updatedRoadmapData = {\n      ...roadmapData\n    };\n    updatedRoadmapData.subjects.forEach(subject => {\n      const topicToUpdate = subject.topics.find(t => t.id === topicId);\n      if (topicToUpdate) {\n        topicToUpdate.completed = !topicToUpdate.completed; // Toggle completion status\n      }\n    });\n    setRoadmapData(updatedRoadmapData); // Update roadmap data in state\n    calculateCompletionPercentage(); // Recalculate completion percentage\n  };\n\n  // Effect hook to render the diagram and calculate percentage on initial load\n  useEffect(() => {\n    if (mermaidContainer.current) {\n      renderMermaidDiagram(); // Render diagram initially\n      calculateCompletionPercentage(); // Calculate completion percentage initially\n    }\n  }, []); // Run only once when component mounts\n\n  // Effect hook to rerender diagram whenever roadmapData changes\n  useEffect(() => {\n    renderMermaidDiagram(); // Re-render diagram when roadmapData changes\n  }, [roadmapData]); // Dependency array includes roadmapData to trigger re-render\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mermaidContainer,\n      className: \"mermaid\",\n      id: \"mermaid-diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Roadmap Completion: \", completionPercentage.toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapView, \"ULJ44Lo0DEyryvPz6DxLGspAqug=\");\n_c = RoadmapView;\nexport default RoadmapView;\nvar _c;\n$RefreshReg$(_c, \"RoadmapView\");","map":{"version":3,"names":["React","useRef","useEffect","useState","roadmapData","initialRoadmapData","jsxDEV","_jsxDEV","RoadmapView","_s","mermaidContainer","setRoadmapData","completionPercentage","setCompletionPercentage","calculateCompletionPercentage","completedTopics","subjects","reduce","total","subject","topics","filter","topic","completed","length","totalTopics","renderMermaidDiagram","mermaidMarkdown","forEach","id","name","mermaid","render","svgCode","current","innerHTML","attachClickHandlers","topicNode","document","getElementById","addEventListener","handleTopicClick","topicId","updatedRoadmapData","topicToUpdate","find","t","children","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["D:/react-vcx7m6/src/components/RoadmapView.js"],"sourcesContent":["/* global mermaid */ // Tell ESLint about the mermaid global variable\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { roadmapData as initialRoadmapData } from '../data/roadmapData'; \r\n\r\nfunction RoadmapView() {\r\n  const mermaidContainer = useRef(null); // Container reference for Mermaid diagram\r\n  const [roadmapData, setRoadmapData] = useState(initialRoadmapData); // State for roadmap data\r\n  const [completionPercentage, setCompletionPercentage] = useState(0); // State for completion percentage\r\n\r\n  // Function to calculate completion percentage\r\n  const calculateCompletionPercentage = () => {\r\n    const completedTopics = roadmapData.subjects.reduce((total, subject) => {\r\n      return total + subject.topics.filter(topic => topic.completed).length;\r\n    }, 0);\r\n    const totalTopics = roadmapData.subjects.reduce((total, subject) => {\r\n      return total + subject.topics.length;\r\n    }, 0);\r\n    setCompletionPercentage((completedTopics / totalTopics) * 100);\r\n  };\r\n\r\n  // Render Mermaid Diagram\r\n  const renderMermaidDiagram = () => {\r\n    let mermaidMarkdown = 'graph LR\\n'; // Mermaid diagram definition\r\n\r\n    // Loop through subjects and topics to create graph nodes and edges\r\n    roadmapData.subjects.forEach((subject) => {\r\n      mermaidMarkdown += `${subject.id}([${subject.name}])\\n`;\r\n\r\n      subject.topics.forEach((topic) => {\r\n        mermaidMarkdown += `${subject.id} --> ${topic.id}[\"${topic.name} ${topic.completed ? '(Completed)' : ''}\"]\\n`;  \r\n      });\r\n    });\r\n\r\n    // Use mermaid.render to inject the generated diagram into the container\r\n    mermaid.render('mermaid-diagram', mermaidMarkdown, (svgCode) => {\r\n      if (mermaidContainer.current) {\r\n        mermaidContainer.current.innerHTML = svgCode; // Render Mermaid diagram into container\r\n        attachClickHandlers(); // Attach click handlers after rendering\r\n      }\r\n    });\r\n  };\r\n\r\n  // Attach click handlers to each topic node\r\n  const attachClickHandlers = () => {\r\n    roadmapData.subjects.forEach((subject) => {\r\n      subject.topics.forEach((topic) => {\r\n        const topicNode = document.getElementById(topic.id); // Get node by ID\r\n        if (topicNode) {\r\n          topicNode.addEventListener('click', () => handleTopicClick(topic.id)); // Attach click event\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  // Handle topic click to toggle completion status\r\n  const handleTopicClick = (topicId) => {\r\n    const updatedRoadmapData = { ...roadmapData };\r\n    updatedRoadmapData.subjects.forEach((subject) => {\r\n      const topicToUpdate = subject.topics.find((t) => t.id === topicId);\r\n      if (topicToUpdate) {\r\n        topicToUpdate.completed = !topicToUpdate.completed; // Toggle completion status\r\n      }\r\n    });\r\n\r\n    setRoadmapData(updatedRoadmapData); // Update roadmap data in state\r\n    calculateCompletionPercentage(); // Recalculate completion percentage\r\n  };\r\n\r\n  // Effect hook to render the diagram and calculate percentage on initial load\r\n  useEffect(() => {\r\n    if (mermaidContainer.current) {\r\n      renderMermaidDiagram(); // Render diagram initially\r\n      calculateCompletionPercentage(); // Calculate completion percentage initially\r\n    }\r\n  }, []); // Run only once when component mounts\r\n\r\n  // Effect hook to rerender diagram whenever roadmapData changes\r\n  useEffect(() => {\r\n    renderMermaidDiagram(); // Re-render diagram when roadmapData changes\r\n  }, [roadmapData]); // Dependency array includes roadmapData to trigger re-render\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mermaidContainer} className=\"mermaid\" id=\"mermaid-diagram\" /> {/* Container for Mermaid diagram */}\r\n      <p>Roadmap Completion: {completionPercentage.toFixed(2)}%</p> {/* Display completion percentage */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoadmapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}