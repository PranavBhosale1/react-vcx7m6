{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-vcx7m6\\\\src\\\\components\\\\RoadmapView.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { roadmapData as initialRoadmapData } from '../data/roadmapData'; // Rename for clarity\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoadmapView() {\n  _s();\n  const mermaidContainer = useRef(null);\n  const [roadmapData, setRoadmapData] = useState(initialRoadmapData);\n  const [completionPercentage, setCompletionPercentage] = useState(0);\n  useEffect(() => {\n    if (mermaidContainer.current) {\n      renderMermaidDiagram();\n      calculateCompletionPercentage(); // Calculate the initial percentage\n    }\n  }, []);\n  const renderMermaidDiagram = () => {\n    let mermaidMarkdown = 'graph LR\\n';\n    roadmapData.subjects.forEach(subject => {\n      mermaidMarkdown += `${subject.id}([${subject.name}])\\n`;\n      subject.topics.forEach(topic => {\n        mermaidMarkdown += `${subject.id} --> <span id=\"${topic.id}\" onClick={() => handleTopicClick(topic.id)}>${topic.name}</span>\\n`; // Clickable span \n      });\n    });\n    mermaidContainer.current.innerHTML = mermaidMarkdown;\n  };\n  const handleTopicClick = topicId => {\n    const updatedRoadmapData = {\n      ...roadmapData\n    };\n    updatedRoadmapData.subjects.forEach(subject => {\n      const topicToUpdate = subject.topics.find(t => t.id === topicId);\n      if (topicToUpdate) {\n        topicToUpdate.completed = !topicToUpdate.completed;\n      }\n    });\n    setRoadmapData(updatedRoadmapData);\n    calculateCompletionPercentage(); // Recalculate percentage\n  };\n  const calculateCompletionPercentage = () => {\n    const completedTopics = roadmapData.subjects.reduce((total, subject) => {\n      return total + subject.topics.filter(topic => topic.completed).length;\n    }, 0);\n    const totalTopics = roadmapData.subjects.reduce((total, subject) => {\n      return total + subject.topics.length;\n    }, 0);\n    setCompletionPercentage(completedTopics / totalTopics * 100);\n  };\n\n  // Re-render Mermaid diagram when roadmapData changes\n  useEffect(() => {\n    renderMermaidDiagram();\n  }, [roadmapData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mermaidContainer,\n      className: \"mermaid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Roadmap Completion: \", completionPercentage, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapView, \"ULJ44Lo0DEyryvPz6DxLGspAqug=\");\n_c = RoadmapView;\nexport default RoadmapView;\nvar _c;\n$RefreshReg$(_c, \"RoadmapView\");","map":{"version":3,"names":["React","useRef","useEffect","useState","roadmapData","initialRoadmapData","jsxDEV","_jsxDEV","RoadmapView","_s","mermaidContainer","setRoadmapData","completionPercentage","setCompletionPercentage","current","renderMermaidDiagram","calculateCompletionPercentage","mermaidMarkdown","subjects","forEach","subject","id","name","topics","topic","innerHTML","handleTopicClick","topicId","updatedRoadmapData","topicToUpdate","find","t","completed","completedTopics","reduce","total","filter","length","totalTopics","children","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react-vcx7m6/src/components/RoadmapView.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { roadmapData as initialRoadmapData } from '../data/roadmapData'; // Rename for clarity\r\n\r\nfunction RoadmapView() {\r\n  const mermaidContainer = useRef(null);\r\n  const [roadmapData, setRoadmapData] = useState(initialRoadmapData);\r\n  const [completionPercentage, setCompletionPercentage] = useState(0); \r\n\r\n  useEffect(() => {\r\n    if (mermaidContainer.current) {\r\n      renderMermaidDiagram(); \r\n      calculateCompletionPercentage(); // Calculate the initial percentage\r\n    }\r\n  }, []);\r\n\r\n  const renderMermaidDiagram = () => {\r\n    let mermaidMarkdown = 'graph LR\\n';\r\n\r\n    roadmapData.subjects.forEach((subject) => {\r\n      mermaidMarkdown += `${subject.id}([${subject.name}])\\n`;\r\n\r\n      subject.topics.forEach((topic) => {\r\n        mermaidMarkdown += `${subject.id} --> <span id=\"${topic.id}\" onClick={() => handleTopicClick(topic.id)}>${topic.name}</span>\\n`; // Clickable span \r\n      });\r\n    });\r\n\r\n    mermaidContainer.current.innerHTML = mermaidMarkdown;\r\n  };\r\n\r\n  const handleTopicClick = (topicId) => {\r\n    const updatedRoadmapData = { ...roadmapData }; \r\n    updatedRoadmapData.subjects.forEach((subject) => {\r\n      const topicToUpdate = subject.topics.find((t) => t.id === topicId);\r\n      if (topicToUpdate) {\r\n        topicToUpdate.completed = !topicToUpdate.completed;\r\n      }\r\n    });\r\n\r\n    setRoadmapData(updatedRoadmapData); \r\n    calculateCompletionPercentage(); // Recalculate percentage\r\n  };\r\n\r\n  const calculateCompletionPercentage = () => {\r\n    const completedTopics = roadmapData.subjects.reduce((total, subject) => {\r\n      return total + subject.topics.filter(topic => topic.completed).length;\r\n    }, 0);\r\n    const totalTopics = roadmapData.subjects.reduce((total, subject) => {\r\n      return total + subject.topics.length;\r\n    }, 0);\r\n\r\n    setCompletionPercentage((completedTopics / totalTopics) * 100);\r\n  };\r\n\r\n  // Re-render Mermaid diagram when roadmapData changes\r\n  useEffect(() => {\r\n    renderMermaidDiagram();\r\n  }, [roadmapData]); \r\n\r\n  return (\r\n    <div>\r\n      <div ref={mermaidContainer} className=\"mermaid\" />\r\n      <p>Roadmap Completion: {completionPercentage}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoadmapView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}