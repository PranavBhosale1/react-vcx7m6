{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-vcx7m6\\\\src\\\\components\\\\RoadmapView.js\",\n  _s = $RefreshSig$();\n// src/components/RoadmapView.js\nimport React, { useRef, useEffect, useState } from 'react';\nimport { roadmapData } from '../data/roadmapData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoadmapView() {\n  _s();\n  const mermaidContainer = useRef(null);\n  const [completionPercentage, setCompletionPercentage] = useState(0);\n  useEffect(() => {\n    if (mermaidContainer.current) {\n      // Generate Mermaid.js markdown from roadmapData\n      let mermaidMarkdown = `journey\\n  title My Study Roadmap\\n`;\n      roadmapData.subjects.forEach(subject => {\n        mermaidMarkdown += `  section ${subject.name}\\n`;\n        subject.topics.forEach(topic => {\n          mermaidMarkdown += `    ${topic.name}: ${topic.completed ? 7 : 0};\\n`; // 7 for completed, 0 for not completed\n        });\n      });\n\n      // Set the markdown content of the container (Mermaid will render it)\n      mermaidContainer.current.innerHTML = mermaidMarkdown;\n\n      // Calculate initial completion percentage\n      // ... (same logic as before, using roadmapData)\n    }\n  }, []);\n\n  // ... (Handle topic completion - we'll update this logic soon)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mermaidContainer,\n      className: \"mermaid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Roadmap Completion: \", completionPercentage, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapView, \"L0cUt3DAavW1+NWxB/QdqJNgFFo=\");\n_c = RoadmapView;\nexport default RoadmapView;\nvar _c;\n$RefreshReg$(_c, \"RoadmapView\");","map":{"version":3,"names":["React","useRef","useEffect","useState","roadmapData","jsxDEV","_jsxDEV","RoadmapView","_s","mermaidContainer","completionPercentage","setCompletionPercentage","current","mermaidMarkdown","subjects","forEach","subject","name","topics","topic","completed","innerHTML","children","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react-vcx7m6/src/components/RoadmapView.js"],"sourcesContent":["// src/components/RoadmapView.js\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { roadmapData } from '../data/roadmapData';\r\n\r\nfunction RoadmapView() {\r\n  const mermaidContainer = useRef(null);\r\n  const [completionPercentage, setCompletionPercentage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (mermaidContainer.current) {\r\n      // Generate Mermaid.js markdown from roadmapData\r\n      let mermaidMarkdown = `journey\\n  title My Study Roadmap\\n`;\r\n\r\n      roadmapData.subjects.forEach((subject) => {\r\n        mermaidMarkdown += `  section ${subject.name}\\n`;\r\n\r\n        subject.topics.forEach((topic) => {\r\n          mermaidMarkdown += `    ${topic.name}: ${topic.completed ? 7 : 0};\\n`; // 7 for completed, 0 for not completed\r\n        });\r\n      });\r\n\r\n      // Set the markdown content of the container (Mermaid will render it)\r\n      mermaidContainer.current.innerHTML = mermaidMarkdown;\r\n\r\n      // Calculate initial completion percentage\r\n      // ... (same logic as before, using roadmapData)\r\n    }\r\n  }, []);\r\n\r\n  // ... (Handle topic completion - we'll update this logic soon)\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mermaidContainer} className=\"mermaid\" />\r\n      <p>Roadmap Completion: {completionPercentage}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoadmapView;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,gBAAgB,GAAGR,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM,CAACS,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEnED,SAAS,CAAC,MAAM;IACd,IAAIO,gBAAgB,CAACG,OAAO,EAAE;MAC5B;MACA,IAAIC,eAAe,GAAG,qCAAqC;MAE3DT,WAAW,CAACU,QAAQ,CAACC,OAAO,CAAEC,OAAO,IAAK;QACxCH,eAAe,IAAI,aAAaG,OAAO,CAACC,IAAI,IAAI;QAEhDD,OAAO,CAACE,MAAM,CAACH,OAAO,CAAEI,KAAK,IAAK;UAChCN,eAAe,IAAI,OAAOM,KAAK,CAACF,IAAI,KAAKE,KAAK,CAACC,SAAS,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzE,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACAX,gBAAgB,CAACG,OAAO,CAACS,SAAS,GAAGR,eAAe;;MAEpD;MACA;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA,oBACEP,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAKiB,GAAG,EAAEd,gBAAiB;MAACe,SAAS,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDtB,OAAA;MAAAgB,QAAA,GAAG,sBAAoB,EAACZ,oBAAoB,EAAC,GAAC;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV;AAACpB,EAAA,CAjCQD,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAmCpB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}